def new_model(x_train, y_train, x_test, y_test): x_train = x_train.reshape(x_train.shape[@], x_train.shape[1], 1) x_test = x_test.reshape(x_test.shape[@], x_test.shape[1], 1)  model = Sequential()  model.add(Conv1D(filters=4, kernel_size=11, activation='relu', input_shape=(x_train.shape[1], x_train.shape[2]))) model.add(BatchNormalization())  model.add(Conv1D(filters=8, kernel_size=11, activation='relu')) model. add(BatchNormalization())  model.add(Conv1D(filters=16, kernel_size=11, activation='relu')) model. add(BatchNormalization())  model.add(Conv1D(filters=32, kernel_size=11, activation=''relu')) model.add(Flatten())  model. add(Dropout(@.3))  model.add(Dense(16, activation=''relu'))  model. add(Dropout(@.3))  model.add(Dense(16, activation='relu'))  model.add(Dense(1, activation='sigmoid'))  model.compile(optimizer=SGD(1r=0.01), loss='binary_crossentropy', metrics=[ 'accuracy']) model.fit(x_train, y_train, batch_size=256, epochs=10, verbose=1)  model. summary ()  pred = model.predict_classes(x_test, batch_size=256, verbose=0)